{"remainingRequest":"/home/md/Desktop/my-profile/profile/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/md/Desktop/my-profile/profile/node_modules/vue-fancybox/src/fancyBox.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/md/Desktop/my-profile/profile/node_modules/vue-fancybox/src/fancyBox.vue","mtime":1505049873000},{"path":"/home/md/Desktop/my-profile/profile/node_modules/css-loader/dist/cjs.js","mtime":1573040736000},{"path":"/home/md/Desktop/my-profile/profile/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1573040736000},{"path":"/home/md/Desktop/my-profile/profile/node_modules/postcss-loader/src/index.js","mtime":1573040736000},{"path":"/home/md/Desktop/my-profile/profile/node_modules/vuetify-loader/lib/loader.js","mtime":1573040736000},{"path":"/home/md/Desktop/my-profile/profile/node_modules/cache-loader/dist/cjs.js","mtime":1573040736000},{"path":"/home/md/Desktop/my-profile/profile/node_modules/vue-loader/lib/index.js","mtime":1573040736000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mYW5jeS1ib3gtbWFzayB7CiAgcG9zaXRpb246IGZpeGVkOwogIGxlZnQ6IDA7CiAgdG9wOiAwOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOwogIHotaW5kZXg6IDIyOwp9Ci5mYW5jeS1ib3gtaW1hZ2Utd3JhcHBlciB7CiAgcG9zaXRpb246IGZpeGVkOwogIGxlZnQ6IDA7CiAgdG9wOiAwOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICB6LWluZGV4OiAzMzsKfQouZmFuY3ktYm94LWltYWdlLXdyYXBwZXIgZGl2IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbGVmdDogMDsKICB0b3A6IDA7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wIDBweDsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjNzIGN1YmljLWJlemllcigwLjQsIDAsIDAuMjIsIDEpOwp9Ci5mYW5jeS1ib3gtaW1hZ2Utd3JhcHBlciBpbWcgewogIG1heC13aWR0aDogMTAwJTsKICBtYXgtaGVpZ2h0OiAxMDAlOwp9Ci5mYW5jeS1lbnRlciwgLmZhbmN5LWxlYXZlLWFjdGl2ZXsKICBvcGFjaXR5OiAwOwp9Ci5mYW5jeS1lbnRlci1hY3RpdmUsIC5mYW5jeS1sZWF2ZS1hY3RpdmV7CiAgdHJhbnNpdGlvbjogLjJzOwp9Cg=="},{"version":3,"sources":["fancyBox.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fancyBox.vue","sourceRoot":"node_modules/vue-fancybox/src","sourcesContent":["<style>\n  .fancy-box-mask {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    z-index: 22;\n  }\n  .fancy-box-image-wrapper {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 33;\n  }\n  .fancy-box-image-wrapper div {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    transform-origin: left top 0px;\n    transition: transform .3s cubic-bezier(0.4, 0, 0.22, 1);\n  }\n  .fancy-box-image-wrapper img {\n    max-width: 100%;\n    max-height: 100%;\n  }\n  .fancy-enter, .fancy-leave-active{\n    opacity: 0;\n  }\n  .fancy-enter-active, .fancy-leave-active{\n    transition: .2s;\n  }\n</style>\n\n<template>\n  <transition name=\"fancy\">\n    <div v-show=\"visible\" class=\"fancy-box-mask\">\n      <div ref=\"fancyBoxWrapper\" class=\"fancy-box-image-wrapper\">\n        <div v-for=\"(image, index) in prev\" :style=\"{ webkitTransform: 'translate3d(-'+ (index+1)*image.scaleWidth +'px, 0, 0)' }\">\n          <div :style=\"{ webkitTransform: 'translate3d(0, '+ image.y +'px, 0)' }\"><img :style=\"{ width: ''+ image.w +'px' }\" :src=\"image.url\"></div>\n        </div>\n        <div>\n          <div :style=\"activeStyle\"><img :style=\"activeImageStyle\" :src=\"activeUrl\"></div>\n        </div>\n        <div v-for=\"(image, index) in next\" :style=\"{ webkitTransform: 'translate3d('+ (index+1)*image.scaleWidth +'px, 0, 0)' }\">\n          <div :style=\"{ webkitTransform: 'translate3d(0, '+ image.y +'px, 0)' }\"><img :style=\"{ width: ''+ image.w +'px' }\" :src=\"image.url\"></div>\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script>\n\n  import Vue from 'vue';\n\n  import VueTouch from 'vue-touch';\n\n  Vue.use(VueTouch);\n\n  export default {\n    name: 'fancy-box',\n    data () {\n      return {\n        activeStyle: {},\n        activeUrl: '',\n        activeImageStyle: {},\n        prev: [],\n        next: [],\n        thumbnails: [],\n        tap: null,\n        pan: null,\n        isZoom: false\n      }\n    },\n    props: {\n      imageItems: {\n        type: Array\n      },\n      visible: {\n        type: Boolean\n      }\n    },\n    methods : {\n      onTapImage(...initialArgs) {\n        \n        let e = initialArgs[0], image = e.target, el = image.parentNode;\n\n        let boundingClientRect = el.getBoundingClientRect();\n\n        this.imageIndex = Number(el.dataset.index) || 0;\n\n        this.createImage(image.src, boundingClientRect, image);\n      },\n      initDom () {\n\n        let prev = this.imageItems.slice(0, this.imageIndex);\n        let next = this.imageItems.slice(this.imageIndex + 1, this.imageItems.length);\n\n        prev.forEach((n, i) => {\n          n.y = this.getCenter(i).y;\n          n.w = this.getCenter(i).w;\n        });\n\n        next.forEach((n, i) => {\n          n.y = this.getCenter((this.imageIndex+1) + i).y;\n          n.w = this.getCenter((this.imageIndex+1) + i).w;\n        });\n\n        this.prev = prev;\n        this.next = next;\n\n        this.listEl = this.$refs.fancyBoxWrapper.children;\n\n        this.initEvent();\n      },\n      initEvent () {\n\n        this.tap = new Hammer.Manager(this.$refs.fancyBoxWrapper);\n        this.pan = new Hammer(this.$refs.fancyBoxWrapper);\n\n        this.tap.add( new Hammer.Tap({ event: 'doubletap', taps: 2 }) );\n        this.tap.add( new Hammer.Tap({ event: 'singletap' }) );\n\n        this.tap.get('doubletap').recognizeWith('singletap');\n        this.tap.get('singletap').requireFailure('doubletap');\n\n        this.tap.on('singletap', (e) => {\n          if (this.isZoom) return;\n          this.onSingleTap(e);\n        });\n        this.tap.on('doubletap', (e) => {\n          this.onDoubleTap(e);\n        });\n\n        this.pan.on('panstart', (e) => {\n          if (this.isZoom) {\n            // this.onImageStart(e);\n          } else {\n            this.onPanStart(e);\n          }\n        });\n        this.pan.on('panmove', (e) => {\n          if (this.isZoom) {\n            // this.onImageMove(e);\n          } else {\n            this.onPanMove(e);\n          }\n        });\n        this.pan.on('panend', (e) => {\n          if (this.isZoom) {\n            // this.onImageEnd(e);\n          } else {\n            this.onPanEnd(e);\n          }\n        });\n      },\n      onImageStart (...initialArgs) {\n        let e = initialArgs[0];\n        this.startX = e.pointers[0].pageX - (this.offsetX || 0);\n        this.startY = e.pointers[0].pageY - (this.offsetY || this.getCenter().y);\n      },\n      onImageMove (...initialArgs) {\n        let e = initialArgs[0];\n        let scale = this.getCenter().scale;\n        let y = this.getCenter().y;\n\n        this.offsetX = e.pointers[0].pageX - this.startX;\n        this.offsetY = e.pointers[0].pageY - this.startY;\n        \n        if (this.offsetX > this.maxTx) {\n          this.offsetX = this.maxTx;\n        } else if (this.offsetX < this.minTx) {\n          this.offsetX = this.minTx;\n        }\n\n        if (this.offsetY > this.maxTy) {\n          this.offsetY = this.maxTy;\n        } else if (this.offsetY < this.minTy) {\n          this.offsetY = this.minTy;\n        }\n\n        this.activeImageEl.style.webkitTransition = '0s';\n        this.activeImageEl.style.webkitTransform = `translate3d(${this.offsetX}px, ${this.offsetY}px, 0px) scale3d(${scale}, ${scale}, 1)`;\n      },\n      onImageEnd (...initialArgs) {\n        let e = initialArgs[0];\n        this.activeImageEl.style.webkitTransition = '';\n      },\n      onDoubleTap (...initialArgs) {\n        let e = initialArgs[0];\n\n        if(this.imageItems[this.imageIndex].width < window.innerWidth) {\n          return;\n        }\n\n        let center = e.center,\n          x = center.x - this.getCenter().x,\n          y = center.y - this.getCenter().y;\n\n        this.activeImageEl = this.listEl[this.imageIndex].firstElementChild;\n\n        this.maxTx = this.getCenter().maxTx(x, y);\n        this.minTx = this.getCenter().minTx(x, y);\n        this.maxTy = this.getCenter().maxTy(x, y);\n        this.minTy = this.getCenter().minTy(x, y);\n\n        if (this.isZoom) {\n          this.activeImageEl.style.webkitTransform = `translate3d(${this.getCenter().x}px, ${this.getCenter().y}px, 0px)`;\n          setTimeout(() => {  \n            this.activeImageEl.style.webkitTransformOrigin = `left top 0px`;\n          }, 500);\n          this.isZoom = false;\n        } else {\n          this.activeImageEl.style.webkitTransform = `translate3d(${this.getCenter().x}px, ${this.getCenter().y}px, 0px) scale3d(${this.getCenter().scale}, ${this.getCenter().scale}, 1)`;\n          this.activeImageEl.style.webkitTransformOrigin = `${x}px ${y}px 0px`;\n          this.isZoom = true;\n        }\n      },\n      onSingleTap (...initialArgs) {\n        let e = initialArgs[0];\n        this.destroy(this.imageIndex);\n      },\n      onPanStart (...initialArgs) {\n        let e = initialArgs[0];\n        this.startTime = e.timeStamp;\n        this.startX = e.pointers[0].pageX;\n        this.offsetX = 0;\n      },\n      onPanMove (...initialArgs) {\n\n        let e = initialArgs[0];\n        let i = this.imageIndex - 1;\n        let end = i + 3;\n\n        this.offsetX = e.pointers[0].pageX - this.startX;\n\n        for(; i < end; i++) {\n\n          let index = i - this.imageIndex;\n          let el = this.listEl[i];\n\n          el && (el.style.webkitTransition = '0s ease-out');\n          el && (el.style.webkitTransform = `translate3d(${ index * this.scaleWidth + this.offsetX }px, 0px, 0)`);\n          el && (el.firstElementChild.style.webkitTransform = `translate3d( ${this.getCenter(i).x}px, ${this.getCenter(i).y}px, 0)`);\n        };\n      },\n      onPanEnd (...initialArgs) {\n        let e = initialArgs[0];\n        let boundary = this.scaleWidth / 6;\n        let endTime = e.timeStamp;\n        let offsetX = this.offsetX;\n\n        if(endTime - this.startTime > 300) {\n          if(offsetX >= boundary){\n            this.goPage('-1');\n          } else if(offsetX < 0 && offsetX < -boundary) {\n            this.goPage('+1');\n          } else {\n            this.goPage('0');\n          };\n        } else {\n          if(offsetX > 50){\n            this.goPage('-1');\n          } else if(offsetX < -50) {\n            this.goPage('+1');\n          } else {\n            this.goPage('0');\n          };\n        }\n      },\n      goPage (n) {\n        let length = this.imageItems.length;\n        let cid = 0;\n        let lis = this.listEl;\n\n        if (typeof n == 'number') {\n          cid = this.imageIndex;\n        } else if (typeof n == 'string') {\n          cid = this.imageIndex + n*1;\n        };\n\n        if (cid > length - 1) {\n          cid = length - 1;\n        } else if (cid < 0){\n          cid = 0;\n        };\n\n        this.imageIndex = cid;\n\n        lis[cid].style.webkitTransition = '0.2s ease-out';\n        lis[cid - 1] && (lis[cid - 1].style.webkitTransition = '0.2s ease-out');\n        lis[cid + 1] && (lis[cid + 1].style.webkitTransition = '0.2s ease-out');\n\n        lis[cid].style.webkitTransform = `translate3d(0, 0, 0)`;\n        lis[cid].firstElementChild.style.webkitTransform = `translate3d(${this.getCenter(cid).x}, ${this.getCenter(cid).y}px, 0)`;\n\n        lis[cid - 1] && (lis[cid - 1].style.webkitTransform = `translate3d(-${this.scaleWidth}px, 0px, 0)`);\n        lis[cid - 1] && (lis[cid - 1].firstElementChild.style.webkitTransform = `translate3d(${this.getCenter(cid - 1).x}px, ${this.getCenter(cid - 1).y}px, 0)`);\n\n        lis[cid + 1] && (lis[cid + 1].style.webkitTransform = `translate3d(${this.scaleWidth}px, 0px, 0)`);\n        lis[cid + 1] && (lis[cid + 1].firstElementChild.style.webkitTransform = `translate3d(${this.getCenter(cid + 1).x}px, ${this.getCenter(cid + 1).y}px, 0)`);\n      },\n      destroy (n) {\n\n        if (! this.listEl) return;\n\n        let image = this.listEl[n].firstElementChild;\n        let original = this.thumbnails[n];\n        let location = original.getBoundingClientRect();\n        let zoom = this.getZoomTransform(original.firstElementChild);\n\n        this.tap.off('singletap');\n        this.tap.off('doubletap');\n\n        this.pan.off('panstart');\n        this.pan.off('panmove');\n        this.pan.off('panend');\n\n        image.style.webkitTransform = `translate3d(${location.left}px, ${location.top}px, 0px) scale(${zoom})`;\n        \n        setTimeout(() => {\n\n          this.visible = false;\n\n          setTimeout(() => {\n            this.$refs.fancyBoxWrapper && (document.body.removeChild(this.$refs.fancyBoxWrapper.parentNode));\n            this.$destroy();\n          }, 200);\n        }, 300);\n      },\n      getElWidth (el) {\n        return el.getBoundingClientRect().width;\n      },\n      getZoomTransform (el) {\n        return (this.getElWidth(el) / this.imageItems[this.imageIndex].width) / this.imageItems[this.imageIndex].fitRatio;\n      },\n      getCenter (index) {\n        let imageObj = (typeof index == 'undefined') ? this.imageItems[this.imageIndex] : this.imageItems[index];\n        return {\n          x: Math.round((window.innerWidth - (imageObj.width * imageObj.fitRatio)) / 2),\n          y: Math.round((window.innerHeight - (imageObj.height * imageObj.fitRatio)) / 2),\n          w: Math.round(imageObj.width * imageObj.fitRatio),\n          scale: imageObj.width / window.innerWidth,\n          widthFix: imageObj.width - window.innerWidth,\n          maxTx (x, y) {\n            return this.widthFix * (x / window.innerWidth);\n          },\n          minTx (x, y) {\n            return 0 - this.widthFix * ((window.innerWidth - x) / window.innerWidth);\n          },\n          maxTy (x, y) {\n            let height = window.innerHeight - (this.y * 2);\n            let heightFix = imageObj.height - height;\n            return heightFix * (y / height);\n          },\n          minTy (x, y) {\n            let height = window.innerHeight - (this.y * 2);\n            let imgAreaY = (window.innerHeight - height) / 2;\n            let heightFix = imageObj.height - height;\n            y = (y + this.y) - imgAreaY;\n            return 0 - (heightFix * ((height - y) / height ) - (height + this.y));\n          }\n        }\n      }\n    },\n    created () {\n      this.scaleWidth = window.innerWidth;\n    },\n    mounted () {}\n  }\n</script>"]}]}